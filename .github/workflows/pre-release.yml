name: Build and Create release

on: 
  push:
    tags:
    - 'v0*'

env:
  BUILD_TYPE: RELEASE

jobs:
  build:

    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v2

      # On Windows machines ${{runner.workspace}} is a folder that has the name of the repository, 
      # but the checkout action checks the code out to a nested directory with te same name.
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/Gcode_renamer/build
    
    - name: Get static Qt
      working-directory: ${{runner.workspace}}/Gcode_renamer/build
      run: pwsh -command "${{runner.workspace}}/Gcode_renamer/downloadQt.ps1"

    - name: Configure CMake
      working-directory: ${{runner.workspace}}/Gcode_renamer/build
      run: pwsh -command "cmake -T host=x86 ${{runner.workspace}}/Gcode_renamer -DQt5_DIR=${env:GITHUB_WORKSPACE}/msvc2019-x64-static/lib/cmake/Qt5"

    - name: Build
      working-directory: ${{runner.workspace}}/Gcode_renamer/build
      run: pwsh -command "cmake --build . --config ${env:BUILD_TYPE}"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: true

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: build\Release\Gcode_renamer.exe
        asset_name: Gcode_renamer.exe
        asset_content_type: application/vnd.microsoft.portable-executable

